template <class T>
Tarray<T>::Tarray(){
    used = 0;
    capacity = 5;
    current_index = 0; 
    data = new T[capacity];
}

    // This function puts the item into the next available spot in the 
    //array.
    // If the array is full, resize is called.

template <class T>
void Tarray<T>::add(T item){
    if (used == capacity){
        resize();
    }
    data[used] = item;
    used++;
}

    // iterator functions

    // places the current_index at the beginning of the array

template <class T>
void Tarray<T>::start(){
    current_index = 0;
}   

    // returns true if the current index is less than used

template <class T>
bool Tarray<T>::is_item()const{
    if (current_index < used){
        return true;
    }
    return false;
}

    // moves current index to the next array location

template <class T>
void Tarray<T>::advance(){
    current_index++;
}

    // returns the array item being referenced by cuurent index

template <class T>
T Tarray<T>::current()const{
    return data[current_index];
}

    // removes the item at the current index spot

template <class T>
void Tarray<T>::remove_current(){
    T tmp;
    for (int i = current_index; i < used; i++){
        data[i] = data[i + 1];
    }
    data[used] = tmp;
    used--;
}

template <class T>
void Tarray<T>::resize(){
    T *tmp;
    tmp = new T[capacity + 5];
    capacity += 5;
    for (int i = 0; i < used; i++){
        tmp[i] = data[i];
    }
    delete [] data;
    data = tmp;
}